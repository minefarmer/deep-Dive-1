                    REDUCING FUNCTIONS

        Reducing Functions in Python
These ar the functions that recombine an iterable recursively, ending up with a single return value.
Also called accumulators, aggregators, or folding functions.

Example:    Finding the maximum value in an iterable.

a ,  a ,  a ,  ...,  a
 0    1    2          n-1

max(a, b)  -> maximum of a and b

result = a
          0

result = a
          0
result = max(result, a )
                      1
result = max(result, a )
                      2
...
result = max(result, )
                    n-1

        -> max value in a , a , a , ..., a
                         0   1   2        n-1


Because we have not studied iterables in general, we will stay with the special case of sequences.

        Using the Loop.
l = [5, 8, 6, 10, 9]

max_value = lambda a, b: a if a > b else b

def max_sequence(sequence):                     result = 5
    result = sequence[0]                        result = max(5, 8) = 8
    for e in sequence[1: ]:                     result = max(8, 6) 8
    result = max_value(result, e)               result = max(8, 10) = 10
     return result                              result = max(8, 10) = 10
                                                    result -> 10

    TO CALCULATE THE MAX
    Notice the sequence of steps

l = [5,     8,     6,     10,     9]
     ^      ^      ^       ^      ^
     |      |      |       |      |
     5      |      |       |      |
      \     |      |       |      |
       \    |      |       |      |
    max(5,  8)     |       |      |
        8_____     |       |      |
               \   |       |      |
            max(8, 6)      |      |
                8_____     |      |
                      \    |      |
                   max(8,  10)    |
                         10___    |
                              \   |
                          max(10, 9 )
                                10

                         result = 10

    To calculate the minimum

l = [5, 8, 6, 10, 9]

min_value = lambda a, b: a if a < b else b

def min_sequence(sequence):               All we really need to do was to change the function that is repeatedly applied.
    result = sequence[0]
    for e in sequence[1: ]:
        result = min_value(result, e)
    return result

In fact I could write:

def _reduce(fn, sequence):
    result = sequence[0]






