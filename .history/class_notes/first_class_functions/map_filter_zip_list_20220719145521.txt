                Map Filter Zip List
        Higher order functions.
A function that takes a function as a parameter and/or returns a function as it's return value.

    Example: sorted
             map      modern alternative -> list comprehensions and generator expressions
             filter     "                       "                       "


        The map function  ***********************************************************************************
map(func, *iterables)

    *iterables      -> a variable number of iterable objects.

    func            -> some function that takes as many arguments as there iterable objects passed to iterables.

map(func, *iterables) will then return an iterator that calculates the function applied to each element of the iterables.

    The iterator stops as soon as one of the iterables has been exhausted.


        Examples
l = [2, 3, 4]

def sq(x):
    return x**2

list(map(sq, l))    -> [4, 9, 16]

l1 = [1, 2, 3]
l2 = [10, 20, 30]

def add(x, y):
    return x + y

list(map(add, l1, l2))  -> [11, 22, 33]

list(map(lambda x, y: x + y, l1, l2)) -> [11, 22, 33]


        The filter function  ****************************************************************************

filter(func, iterable)
    iterable    -> a single iterable.

    func        -> some function that takes a single argument.

filter(func, iterable) will then return an iterator that contains all the elements of the iterable for which the function called on it is Truthy.

If the function is None, it simply returns the elements of iterable that are Truthy.


        Examples
l = [0, 1, 2, 3, 4]

list(filter(None, 1))   -> [1, 2, 3, 4]


def is_even(n):
    return n == 0

list(filter(is_even, l))    -> [0, 2, 4]

list(fil)


