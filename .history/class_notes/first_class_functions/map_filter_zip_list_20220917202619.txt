                    Map, Filter, Zip, List

            Higher order functions
A function that takes a function as a parameter and/or returns a function as it's return value.

Example: sorted  -> is a higher order function.

    map
      \
       -> modern alternative -> list comprehension -> list comprehensions and generator expressions.
      /
    filter


            Map function

map(func, *iterables)
        *iterables -> a variable number of iterable objects.
        func -> some function that takes as many arguments as there are iterable objects passed to iterables.
            Now the only caveat, the only requirement is that func takes in as many arguments as I provide.
map(func, *iterables) will then return an iterator that calculates the function applied to each element of the iterables.


        Examples
l = [2, 3, 4]

def sq(x):
    return x**2

list(map(sq, l))    -> [4, 9, 16]


l1 = [1, 2, 3]
l2 = [10, 20, 30]

def add(x, y):
    return x + y

list(map(add, l1, l2))    -> [11, 22, 33]


    Using lambda.
list(map(lambda x, y: x + y, l1, l2)) -> [11, 22, 33]



        The Filter function         -> What filter does it allows us to specify a function that determines whether we retain or throw out the elements of that iterable.

filter(func, iterable)

    iterable    -> a single iterable

    func        -> some function that takes a single argument.

filter(func, iterable) will then return an iterable that contains all the elements of the iterable for which te=he function called on it is Truthy.
If the function is None, it simply returns the elements of iterable that are Truthy.

    Examples
l = [0, 1, 2, 3, 4]
list(filter(None, l))   -> [1, 2, 3, 4]

def is_even(n):
    return n % 2 == 0

list(filter(is_even, l)) -> [0, 2, 4]

list(filter(lambda n: n % 2 == 0, l))   -> [0, 2, 4]



            The Zip function
The zip function isn't a higher order function, but it's really useful in conjuction with higher order functions and with List Comprehensions and Generator Expressions.
            The Zip function            zip(*iterable)



