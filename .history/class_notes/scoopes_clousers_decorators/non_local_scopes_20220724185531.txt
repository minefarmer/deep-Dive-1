                        Non-local Scopes
            Inner functions
We can define functions from inside another function:

def inner_func():                                               global scope
    # some code                                                                   Nested local scopes
                                                        local (outer_func)
    def inner_func():
        # some code
                                                        local (inner_func)
    inner_func()


outer_func()

Both functions have access to the global and built-in scopes as well as their respective local scopes.

Referencing variables from the enclosing scope.

module.py
a = 10

def outer_func():
    print(a)

outer_func()            When we call outer_func, Python sees the reference to a
                        Since a is not in the local scope, Python looks in the enclosing (global) scope.


Now consider this example:

module.py

def outer_func():
    a = 10

    def inner_func():
        print(a)

    inner_func()

outer_func

When we call outer_func, inner_func is created and called.

When inner_func is called, Python does not find a in the local (inner_func) scope.


            Modifying global variables *******************************************************************

We saw how to use the global keyword in order to modify a global variablr within a nested scope.

a = 10

def outer_func():
    global a
    a = 1000

outer_func()
print(a)        -> 1000
                    We can do the same thing from within a nested function.

def outer_func2():
    def inner_func():
        global a
        a = 'hello
    inner_func()

outer_func2()
print(a)        -> hello


            Modifying non-local variables ****************************************************************

Can we modify variables defined in the outer nonlocal scope?

def outer_func():
    x = 'python

    inner_func()

    print(x)

outer_func()  -> hello

When inner_func is compllied, python sees an assignment to x.
So it determines that x is a local variable to inner_func,
The variable x in inner_func masks the variable x in outer_func.
Just as with global variables, we have to explicitly tell Python we are modifying a non local variable.
We can do that using the nonlocal keyword.

def outer_func():
    x = 'hello'

    def inner_func():
        non-local
        x = 'python'

    inner_func()

    print(x)


            Non-local Variables
Whenever Python is told that a variable is nonlocal.
    It will look for it in the enclosing local scopes chain until it first encounters the specified variable name.
    Beware: it will only look in local scopes, it wil not look in the global scope.

def outer():
    x = 'hello'

    def inner1():
        def





