                DECORATOR PARAMETERS
In the last video I saw some built-in decorators that can handle som arguments:

@wraps(fn)              @lru_cache(maxsize= 256)    <----- function call
def inner():            def factorial(n):
   ...                      ...

This should look quite different from the decorators we have been creating and using:

@timed      <------ no function call
def fibonacci(n):
   ...


            The Timed decorator  ****************************************************************************

def timed(fn):
    from time import perf_counter

    def inner(*args, **kwargs):
        total_elapsed = 0
        for i in range(10):
            start = perf_counter()
            result = fn(*args, **kwargs)
            total_elapsed += (perf_counter() - start)
        avg_elapsed = total_elapsed / 10
        print(avg_elapsed)
        return result
    return inner

@timed
def my_func():      OR      my_func = timed(my_func)
    ...

One approach  ********************************************************************

                / extra parameter
def timed(fn, reps):
    from time import perf_counter

    def inner(*args, **kwargs):
        total_elapsed = 0
        for i in range(reps):   <-----  free variable
            start = perf_counter()
            result = fn(*args, **kwargs)
            total_elapsed += (perf_counter() - start)
        avg_elapsed = total_elapsed / reps
        print(avg_elapsed)
        return result
    return inner


my_func = timed(my_func, 10)  # works fine

Rethinking the solution  **********************

@timed
def my_func():                  my_func = timed(my_func)
    ...

So, timed is a function that returns that inner closure that contains our ori




