                # What are Packages?
        Packages are Modules            (but modules are not necessarily packages)

They can contain
        modules
        packages        (called sub-packages)

If a module is a package, it must have a value set for __path__

After I have imported a module, I can easily see if that module is a package by inspecting the __path__ atriibute   (empty -> module, not-empty -> package)

After i have imported a module, you can easily see if that module is a package bt inspecting the __path__ atriibute (empty -> module, not-empty -> package)


            Packages and file systems  *********************************************************************
Remember that modules do not have to be entities in a file system.      (loaders, finders)
By the same token, packages do not have to be entities in the file system.
Typically they are - just as typically modules are file system entities.
But packages represent a hierarchy of modules / packages.

    pack1,mod1
    pack1.pack1_1.mod1_1


            Importing nested packages  *******************************************************************************
If I have a statement in your top-level program such as as:
    import pack1.pack1.module1

The import system will perform these steps:
    imports pack1
    imports pack1.pack1_1.module1

The sys.modules cache will contain entities for:        pack1
                                                        pack1.pack1_1
                                                        pack1.pack1_1.module1


            File system based Packages  *********************************************************************************
Although modules and packages can be far more generic than  file system based entities, it gets complicated!
    For more info: read = PEP302

In this course we use the traditional file based modules and packages.


            Traditional => file base Packages  ********************************************************************************
Package paths are created by using file system directories and files.
Remember: A package is simply a module that can contain other modules/packages.
On a file system we therefore have to use directories for packages.
The directory name becomes the package name.

Where does the code  go for the package (since it is a module)?     ->  __init__.py

            __init__.py  **************************************************************************************************

To define a package in our file system, we must:
    create a directory whose name will be the package name.
    create a file called __init__.py inside that directory.

That __init__.py file is what tells Python that the directory is a package as opposed to a standard directory.
    (If we don't have an __init__.py file, then Python creates an implicit namespace package)  -> we'll discuss that later.


            What happens when a file based package is imported?
app/
    pack1/
        __init__.py
        module1.py
        module2.py

import pack1
    the code for pack1 is in __init__.py
    that code is loaded, executed and cached in sys.modules with a key of pack1.
        It's just a module!
    The symbol pack1 is added to our namespace referencing the same object.
        It's just a module!
    But, it has a __path__ property   -> file system directory path (absolute)
    also has a __file__ property      -> file system path to __init__.py (absolute)


            Nested Packages ********************************************************************************************

Packages can contain modules as well as packages.

app/                    module inside pack1         pack1.module1a
    pack1/            /
        __init__.py  /
        module1.py -/
        module2.py
                          package inside pack1      pack1.pack1_1
        pack_1/          /   - module inside pack.pack1_1    pack1.pack1_1.module1_1b
            __init__.py -  /
            module_1a.py  /
            module_1b.py -


            __file__, __path_ and __package__ Properties  *******************************************************************

Modules have __file__ and __package__ properties
__file__ is the location of module code in the file system.
__package__ is the package the module code is located in.
    (an empty string if the module is located in the application root).

If the module is also a package, then it also has a __path_ property.
__path_ is the location of the package (directory) in the file system.


app/
    pack1/
        __init__.py         module,__file__ -> .../app/module.py
        module1.py          module.__path__ -> not set
        module2.py          module.__package__  => ''

        pack1_1/
            __init__.py
            module_1a.py    pack1.__file__ -> .../app/pack1/__init__.py
            module_1b.py    pack1.__path__ -> .../app/pack1
                            pack1.__file__ -> pack1

                            pack1.module1a.__file__  -> .../app/pack1/module1a.py
                            pack1.module1a.__path__  -> not set
                            pack1.module1a,__package__  -> pack1


app/
    module.py

    pack1/
        __init__.py
        module1.py
        module2.py

        pack_1/
            __init__.py
            module_1a.py
            module_1b.py

    pack1.pack1_1.__file__ -> .../app/pack1/pack1_1/__init__.py
    pack1.pack1_1.__path__ -> .../app/pack1/pack1_1
    pack1.pack1_1.__package__ -> pack1.pack1_1

    pack1.pack1_1.module1_1a.__file__ -> .../app/pack1/pack1_1/module1_1a.py
    pack1.pack1_1.module1_1a.__path__ -> not set
    pack1.pack1_1.module1_1a.__package__ -> pack1.pack1_1


            What gets loaded during the import phase?  *************************************************************

app/                                       # pack1.__init__.py
    module.py
                     - import pack1.module1a
    pack1/          /  import pack1.module1b
        __init__.py
        module1.py      import pack1.pack1_1.module1_1a
        module2.py

        pack_1/                 Just as before:
            __init__.py             pack1 is imported and added to sys.moduled
            module_1a.py
            module_1b.py            pack1_1 is imported and added to sys.modules

                                    module1_1a is imported and added to sys.modules


                                but now also:
                                    module1a is imported and added to sys.modules


