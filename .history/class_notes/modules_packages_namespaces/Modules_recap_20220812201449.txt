                Modules Recap

        What we've seen sofar...

Modules can be imported using
    the import statement            importlib.import_module

When a module is imported:
    system cache is checked first sys.modules       -> if in cache, just returns cached reference

        otherwise:

    module has to be located (found) somewhere      finders     e.g.  sys.meta.path
    module code has to be retrieved (loaded)        loaders     returned by finder -> ModuleSpec
    "empty" module typed object is created
    a reference to the module is added to the system cache
    module is compiled
    module is executed  -> sets up the module's namespace (module.__dict__ is module.globals())


            Modules Finders

sys.meta_path ->    _frozen_importlib.BuiltinImporter       finds built-ins, such as math
                    _frozen_importlib.FrozenImporter        finds frozen modules
                    __frozen_importlib_external.PathFinder  file=based modules


            PathFinder

    Finds file-based modules based on sys.path and package __path__

    sys.path ->  ['/home/crd/my-app,
                  '/usr/lib/python3.6']

    collections.__path__ -> ['/usr/lib/python3.9/collections']


                built-in  







