                Modules Recap

        What we've seen sofar...

Modules can be imported using
    the import statement            importlib.import_module

When a module is imported:
    system cache is checked first sys.modules       -> if in cache, just returns cached reference

        otherwise:

    module has to be located (found) somewhere      finders     e.g.  sys.meta.path
    module code has to be retrieved (loaded)        loaders     returned by finder -> ModuleSpec
    "empty" module typed object is created
    a reference to the module is added to the system cache
    module is compiled
    module is executed  -> sets up the module's namespace (module.__dict__ is module.globals())


            Modules Finders

sys.meta_path ->    _frozen_importlib.BuiltinImporter       finds built-ins, such as math
                    _frozen_importlib.FrozenImporter        finds frozen modules
                    __frozen_importlib_external.PathFinder  file=based modules


            PathFinder

    Finds file-based modules based on sys.path and package __path__

    sys.path ->  ['/home/crd/my-app,
                  '/usr/lib/python3.6']

    collections.__path__ -> ['/usr/lib/python3.9/collections']


            built-in    import math
    type(math)      -> module
    math.__spec__   -> ModuleSpec(name='math', loader=<class '_frozen_importlib.BuiltinImporter'> origin='built-in')  
    math,__name__   -> math
    math.__package__  -> ''
    __file__ is not an attribute of math    (built-ins only)


            Standard library        import fractions

    type(fractions)         -> module
    fractions.__spec__      -> ModuleSpec(name='fractions', loader=<_frozen_importlib_external.SourceFileloader object at 0x7fa9bf7ff6d8> origin='/iser/lib/python3.9/fractions.py')
    fractions,__name__      => fractions
    fractions.__package__ -> ''
    fractions,__file__      -> /usr/lib/python3.9/fractions.py
        Note that fractions.__file__ was found by PathFinder in one of the paths listed in sys.path

    custom module        import module1
    type(module1)        -> module
    mudule1.__spec__     -> ModuleSpec(name='module1), loader=<frozen_importlib_external,SourceFileloader object at 0x7fa9bf7ff6d8, origin='/home/carl/my+app/module1.py')
    module1__name        -> module1
    module1.__package__  ->''
    module1.__file__     -> /home/crm/my_app/module1.py
        Note that Module1.__file__ was found by PathFinder in one of the paths listed in sys.path


            Some notes *********************************
    Python modules may reside
        in the built-ins
        in files on disk
        they can even be pre-compiled, frozen, or even inside zip archives
        anywhere else that can be accessed by a finder and a loader.
            custom finders/loaders -> database, http, etc.

    For file based modules (PathFinder):
        They must exist in a path specified in      sys.path
                                                    or in a path specified by <package>.__path__
