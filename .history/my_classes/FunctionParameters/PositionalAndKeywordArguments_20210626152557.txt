Positional Arguments

Most common way of assigning arguments to parameters: via the order in which they are passed
i.e. their Position


def my_func(a, b):
    # code ...


my_func(10, 20)  -> a = 10,  b = 20

my_func(20, 10)  -> a = 20,  b = 10



************************************************************************
Default Values

A positional argument can be made optional by specifying a default value for the corresponding parameter.

def my_func(a, b=100):  # b=100 is a default value.     my_func(10, 20)     -> a = 10, b = 20
    # code ...                                          my_func(5)          -> a = 5, b = 100

Consider a case where we have three arguments, and we want to make one of them optional:

# This code will not work
# def my_func(a, b=100, c):   # How would I call this function without specifying a value for the second parameter?
#    # code ...
#                            # my_func(5, 25) ???

If a positional parameter is defined with a default value
    every positional parameter after it
        must also be given a default value  # it can be None, but must be specified.

def my_func(a, b=5, c=10):          my_func(1)  # prints out a = 1, b = 5, c = 10
    # code ...                      my_func(1, 2)  # "   "   a = 1, b = 2, c = 10
                                    my_func(1, 2, 3)  #      a = 1, b = 2, c = 3


Specifing values for a and c, but letting b take on it's default value.

-> Keyword Arguments        (named arguments)

my_func(a=1, c=2)   -> a = 1, b = 5, c = 2

my_func(1, c=2)     -> a = 1, b = 5, c = 2


Positional arguments can, optionally, be specified by using the parameter name, whether or not the parameters have default values.

def my_func(a, b, c)        m
