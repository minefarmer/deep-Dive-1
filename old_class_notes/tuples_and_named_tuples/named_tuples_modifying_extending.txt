                    Named Tuples Are Immutable

So how can we 'change' one or more values inside the tuple?
We have to create a new tuple, with the modified values.

Point2D = namedtuple( 'Point2D', 'x y')

pt = Point2D(0, 0)

    Suppose we need to change the value of the x coordinate:

Simple approach:    pt = Point2D(100, pt.y)
                        Note: The memory address of pt has changed.

        Drawback    The siumple approach has a major drawback.
Stock = namedtuple('Stock), 'symbol year month day open high low close')
    Suppose weonly want to change the close field.

Stock = namedtuple('Stock(djia.symbol, 
                          djia.year 
                          djia.month 
                          djia.day 
                          djia.open         # painful
                          djia.high 
                          djia.low 
                          26_394)

    Maybe slicing or unpacking?
djia = Stock('DJIA', 2018, 1, 25, 26_313, 26458, 26_260, 26_393)

    current = djia[:7]   current -> ('DJIA', 2018, 1, 25, 26_313, 26458, 26_260, 26_393)  --> I get a tuple back

*current, _ = djia current -> ('DJIA', 2018, 1, 25, 26_313, 26458, 26_260, 26_393)  --> I get a list back.
djia = Stock(*current, 26_394) --> unpacked

    I can also use the _make class method-but I need to create an iterable that contains all the values first:

new_values = current + (26_394)  ->  new value concatinated on the back
new_values = current + (26_394)  ->  new_values = current.append(26_394) 
                        / iterable
djia = Stock._make(new_values)

    This still has drawbacks
djia = Stock('DJIA', 2018, 1, 25, 26_313, 26458, 26_260, 26_393) 
    What if I wanted to change a value in the middle, say day?

            *pre, day, *post = djia  -> makes no sence...

Slicing will work:   pre = djia[:3]
                    post = djia [4:]

new_values = pre + (26,) + post
new_values -> ('DJIA', 2018, 1, 26, 26_313, 26458, 26_260, 26_393) 
    djia = Stock(*new_values)


But even this has drawbacks!
djia = Stock('DJIA', 2018, 1, 25, 26_313, 26458, 26_260, 26_393) 

    How about modifying both the day and the high values?
new_values -> djia[:3]+ (26,) + djia[4:5] + djia[4:5] + (26459,) + djia[6:] 

djia = Stock(*new_values)


This is just unreadable and extremely error prone!

          The _replace instance method *************************************************************

Named tuples have a very handy instancr method, _replace

It will copy the named tuple into a new one, replaceing any values from keyword arguments.

The keyword arguments are simply the field names inthe tuple and the new value.

The keyword name must match an existing field name.


Stock = namedtuple('Stock', 'symbol year month day open high low close')
djia = Stock('DJIA', 2018, 1, 25, 26_313, 26_458, 26_260, 26_393)

djia = djia._replace(day=26, high=26_459, close=26_394)

    djia -> 'DJIA', 2018, 1, 26, 26_313, 26_459, 26_260, 26_394)


            Extending a Named Tuple  *******************************************************

Sometimes we want to create named tuple that extends another named tuple, appending one or nore fields.

Stock = namedtuple('Stock', 'symbol year month day open high low close')

We want to create a new named tuple class, StockExt that adds a single field, previous_close.

When dealing with classes, this is sometimes done by using subclassing.

But, this is not easy to do with named tuples.
    and there's a cleaner way of doing this;



Point2D = namedtuple('Point2D', 'x, y' )

Let's say we want to create a Point3D named tuple that ha an extra parameter.

The obvious, and simplest approach here is the best:

    Point3D = namedtuple('Point3D', 'x y z')

What happens if you have a lot of fields in the named tuple? Code is not as clean anymore...

    Stock = namedtuple('Stock', 'symbol year month day open high low close')

    StockExt = namedtuple('Stock', 'symbol year month day open high low close previous close')

How about re-using the existing field names in Stock?

Stock = namedtuple('Stock', 'symbol year month day open high low close')

    Stock._fields -> 'symbol', 'year', 'month'. 'day', 'open', 'high', 'low'. 'close'

I can then create a new named tuple by "extending" the _fields tupie.

new_fields = Stock._fields + ('previous_close',)

StockExt = namedtuple('StockExt', new_fields)


Stock = namedtuple('Stock', 'symbol year month day open high low close')
StockExt = namedtuple('StockExt'), Stock._fields + ('previous_close', )
djia = Stock('DJIA', 2018, 1, 25, 26_313, 26_458, 26_260, 26_393)
djia_ext = StockExt(*djia, 26_000)

or

djia_ext = StockExt._make(djia + (26_000, ))


